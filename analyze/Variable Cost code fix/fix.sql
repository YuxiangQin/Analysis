-- trip level variable cost for external clients
with trip_variable_cost as (
  select trip_id as tmp_trip_id,
    DLVR_CARRIER_NM as tmp_dlvr_carrier_nm,
    least(
      -- spark cost
      coalesce(case when DLVR_CARRIER_NM = 'SPARK'
        then sum(SPARK_ORDER_PAYMENT + SPARK_BONUS_PAYMENT + SPARK_INCENTIVE_AMT) end, 0),
      -- last mile time cap, $0.3 per minute
      coalesce(sum(case when BATCH_SIZE = TRIP_DLVR_SEQ_NBR
        then DATETIME_DIFF(coalesce(DLVR_CARRIER_TS, RTN_TS), ENRTE_TO_PCKUP_TS, SECOND)
        else 0 end) / 60 * 0.3, 0)
    ) / count(*) as trip_line_ext_clnt_variable_cost -- break down to each row in the trip
  from `wmt-edw-sandbox.LM_IAD_DAAS.DPS_DLMD_ALL`
  where TENANT_ID not in (2,1019,1088,1104,1107) -- external clients only, to limit table size
    and trip_id != 'NA'
  group by 1,2
)

-- spot check
select DLVR_CARRIER_NM,
  DLVR_STS,
  SPARK_ORDER_PAYMENT,
  SPARK_BONUS_PAYMENT,
  SPARK_INCENTIVE_AMT,
  case when BATCH_SIZE = TRIP_DLVR_SEQ_NBR
      then DATETIME_DIFF(coalesce(DLVR_CARRIER_TS, RTN_TS), ENRTE_TO_PCKUP_TS, SECOND)
      else 0 end as tot_trip_lm_time
  ,*
from `wmt-edw-sandbox.LM_IAD_DAAS.DPS_DLMD_ALL`
where trip_id = '000f0551-8838-4156-a82d-6e487bff8988'
order by TRIP_DLVR_SEQ_NBR


-- TEST
CREATE OR REPLACE TABLE `wmt-edw-sandbox.LM_IAD_DAAS.TMP_DLY_SUMM_COST_TEST`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)
)
AS (
-- trip level variable cost for external clients
with trip_variable_cost as (
  select trip_id as tmp_trip_id,
    DLVR_CARRIER_NM as tmp_dlvr_carrier_nm,
    least(
      -- spark cost
      coalesce(case when DLVR_CARRIER_NM = 'SPARK'
        then sum(SPARK_ORDER_PAYMENT + SPARK_BONUS_PAYMENT + SPARK_INCENTIVE_AMT) end, 0),
      -- last mile time cap, $0.3 per minute
      coalesce(sum(case when BATCH_SIZE = TRIP_DLVR_SEQ_NBR
        then DATETIME_DIFF(coalesce(DLVR_CARRIER_TS, RTN_TS), ENRTE_TO_PCKUP_TS, SECOND)
        else 0 end) / 60 * 0.3, 0)
    ) / count(*) as trip_line_ext_clnt_variable_cost -- break down to each row in the trip
  from `wmt-edw-sandbox.LM_IAD_DAAS.DPS_DLVR_LAST_MI_DTL`
  where TENANT_ID not in (2,1019,1088,1104,1107) -- external clients only, to limit table size
  group by 1,2
)

SELECT
    RPT_DT,
    STORE_NBR,
    DLVR_CARRIER_NM,
    SLA_TYPE,
    DLVR_CLNT_ID,
    COUNT(DISTINCT SALES_ORDER_NBR) AS TOT_ORDER_RCV_CNT,
	COUNT(DISTINCT CASE WHEN DLVR_CARRIER_TS IS NOT NULL THEN SALES_ORDER_NBR END) AS TOT_ORDER_ACCPT_CNT,
    COUNT(DISTINCT CASE WHEN DRVR_ASSGN_STS like 'Unassigned%' THEN SALES_ORDER_NBR END) AS ORDER_UNASSGN_CNT,
    COUNT(DISTINCT CASE WHEN DRVR_ASSGN_STS like 'Exception%' THEN SALES_ORDER_NBR END) AS ORDER_DRVR_NOSHOW_CNT,
	COUNT(DISTINCT CASE WHEN DRVR_REASSGN_TS IS NOT NULL THEN DLVR_TASK_ID END) AS TOT_DLVR_ACCPT_CNT,
    COUNT(DISTINCT CASE WHEN TRIP_RANK_NBR = 1 THEN DLVR_TASK_ID END) AS TOT_ORDER_DLVR_CNT,
    COUNT(IF(TRIP_RANK_NBR >= 1, 1, NULL)) AS TOT_TRIP_CPLT_CNT,
    COUNT(DISTINCT CASE WHEN ORDER_ON_TM_DLVR_IND = 0 THEN SALES_ORDER_NBR END) AS TOT_ORDER_LATE_DLVR_CNT,
    COUNT(DISTINCT CASE WHEN
	 (ORDER_CNCL_ACTL_TS is null and      CUST_CNCL_RQ_TS is null and     SYS_CNCL_RQ_TS is null and     DRVR_CNCL_RQ_TS is null) and
	RTN_TS IS NOT NULL THEN TRIP_ID END) AS TOT_TRIP_RTN_CNT,
    COUNT(DISTINCT CASE WHEN coalesce(DLVR_CARRIER_TS, RTN_TS) IS NOT NULL THEN TRIP_ID END) AS TOT_TRIP_CNT,
    COUNT(DISTINCT CASE WHEN SYS_CNCL_RQ_TS IS NOT NULL THEN DLVR_TASK_ID END) AS TOT_ORDER_WM_CNCL_CNT,
    COUNT(DISTINCT CASE WHEN CUST_CNCL_RQ_TS IS NOT NULL THEN SALES_ORDER_NBR END) AS TOT_ORDER_CLNT_CNCL_CNT,
	COUNT(DISTINCT CASE WHEN CUST_CNCL_RQ_TS IS NOT NULL THEN DLVR_TASK_ID END) AS TOT_DLVR_CLNT_CNCL_CNT,
	COUNT(DISTINCT CASE WHEN CNCL_TS IS NOT NULL THEN DLVR_TASK_ID END) AS TOT_DLVR_CNCL_CNT,
    -- Last Mile Trip Time
	SUM(case when BATCH_SIZE = TRIP_DLVR_SEQ_NBR then DATETIME_DIFF(coalesce(DLVR_CARRIER_TS, RTN_TS), ENRTE_TO_PCKUP_TS, SECOND) else 0 end) AS TOT_TRIP_LAST_MI_TM_CNT,
	SUM(case when BATCH_IND = 1 and BATCH_SIZE = TRIP_DLVR_SEQ_NBR then DATETIME_DIFF(coalesce(DLVR_CARRIER_TS, RTN_TS), ENRTE_TO_PCKUP_TS, SECOND) else 0 end) AS TOT_TRIP_LM_BATCH_TM,
    -- Service Trip Time
	SUM(case when BATCH_SIZE = TRIP_DLVR_SEQ_NBR then DATETIME_DIFF(coalesce(DLVR_CARRIER_TS, RTN_TS), AT_PCKUP_TS, SECOND) else 0 end) AS TOT_TRIP_SERVICE_TM,
	SUM(case when BATCH_IND = 1 and BATCH_SIZE = TRIP_DLVR_SEQ_NBR then DATETIME_DIFF(coalesce(DLVR_CARRIER_TS, RTN_TS), AT_PCKUP_TS, SECOND) else 0 end) AS TOT_BATCH_TRIP_SERVICE_TM,
    -- early arrival and deliveries (ignores FC deliveries) -- BSCEDA-3240
    count(distinct case when ERLY_DLVRY_IND = 1 then DLVR_TASK_ID end) as ERLY_DLVRY_CNT,
    count(distinct case when DLVR_CARRIER_TS is not null and ERLY_ARRVL_MIN is not null and DLVR_STS not like 'FC%' then DLVR_TASK_ID end) as DLVRY_ERLY_ARRIVAL_CNT,
    count(distinct case when DLVR_CARRIER_TS is not null and AT_PCKUP_TS is not null and DLVR_STS not like 'FC%' then DLVR_TASK_ID end) as DLVRY_ARRIVAL_CNT,
    -- 7/29
	SUM(DATETIME_DIFF(coalesce(DLVR_CARRIER_TS, RTN_TS), ENRTE_TO_PCKUP_TS, SECOND)) AS TOT_LM_TM_QTY,
	SUM(case when BATCH_IND = 1 then  DATETIME_DIFF(coalesce(DLVR_CARRIER_TS, RTN_TS), ENRTE_TO_PCKUP_TS, SECOND) else 0 end) AS TOT_LM_BATCH_TM_QTY,
	COUNT(DISTINCT case when BATCH_IND = 1 and coalesce(DLVR_CARRIER_TS, RTN_TS) is not null then DLVR_TASK_ID end) as TOT_BATCHED_DLVR_CNT,
    -- TOT_ORDER_BATCHED_CNT added temporarily so downstream tableau dash doesn't break -- TODO REMOVE
	COUNT(DISTINCT case when BATCH_IND = 1 and coalesce(DLVR_CARRIER_TS, RTN_TS) is not null then DLVR_TASK_ID end) as TOT_ORDER_BATCHED_CNT,
	COUNT(DISTINCT case when BATCH_IND = 1 and coalesce(DLVR_CARRIER_TS, RTN_TS) is not null then TRIP_ID end) as TOT_BATCHED_TRIP_CNT,
    SUM(DLVR_DOORSTEP_TM) AS TOT_TRIP_DOORSTEP_TM_CNT,
    SUM(case when DATETIME_DIFF(DSPTH_TS, AT_PCKUP_TS, SECOND) < 3600 and TRIP_DLVR_SEQ_NBR=1
                  then DATETIME_DIFF(DSPTH_TS, AT_PCKUP_TS, SECOND) END) AS TOT_TRIP_DRVR_WAIT_TM_CNT, --5/23 removed outliers more than 60 mins
    SUM(case when TRIP_DLVR_SEQ_NBR=1 then DATETIME_DIFF(AT_PCKUP_TS, ENRTE_TO_PCKUP_TS, SECOND) END) AS TOT_TRIP_DRIVETM_TO_PICKUP,
    SUM(case when TRIP_DLVR_SEQ_NBR=1 then DATETIME_DIFF(ENRTE_TO_PCKUP_TS, FINAL_ACCEPTED_TS, SECOND) END) AS TOT_TRIP_ACCPT_TO_EP,
    CAST(SUM(
        CASE
            WHEN DLVR_PKG_SIZE_CD = 'S' THEN 1
            WHEN DLVR_PKG_SIZE_CD = 'M' THEN 2
            WHEN DLVR_PKG_SIZE_CD = 'L' THEN 3
            WHEN DLVR_PKG_SIZE_CD = 'XL' THEN 4
        END
    ) AS NUMERIC) AS TOT_ORDER_AVG_SIZE_QTY,

    COUNT(DISTINCT CASE WHEN DLVR_PKG_SIZE_CD = 'S' AND DLVR_CARRIER_TS IS NOT NULL THEN SALES_ORDER_NBR END) AS TOT_ORDER_S_SIZE_QTY,
    COUNT(DISTINCT CASE WHEN DLVR_PKG_SIZE_CD = 'M' AND DLVR_CARRIER_TS IS NOT NULL THEN SALES_ORDER_NBR END) AS TOT_ORDER_M_SIZE_QTY,
    COUNT(DISTINCT CASE WHEN DLVR_PKG_SIZE_CD = 'L' AND DLVR_CARRIER_TS IS NOT NULL THEN SALES_ORDER_NBR END) AS TOT_ORDER_L_SIZE_QTY,
    COUNT(DISTINCT CASE WHEN DLVR_PKG_SIZE_CD = 'XL' AND DLVR_CARRIER_TS IS NOT NULL THEN SALES_ORDER_NBR END) AS TOT_ORDER_XL_SIZE_QTY,
    SUM(CASE WHEN DLVR_CARRIER_TS IS NOT NULL THEN PKG_LEN_QTY * PKG_WDTH_QTY * PKG_HT_QTY END) AS TOT_ORDER_AVG_VOL_QTY,
    MAX(CASE WHEN DLVR_CARRIER_TS IS NOT NULL THEN PKG_DIM_UOM END) AS TOT_ORDER_AVG_VOL_UOM_CD,
    SUM(CASE WHEN DLVR_CARRIER_TS IS NOT NULL THEN DLVR_PKG_UNIT_QTY END) AS TOT_PKG_ITEM_QTY,
    -- MAX(TOT_BATCH_ORDER_CNT) AS TOT_ORDER_BATCHED_CNT,
    COUNT(DISTINCT CASE WHEN MULTI_TRIP_IND = 1 THEN DLVR_TASK_ID END) AS TOT_ORDER_MULT_TRIP_CNT,
    COUNT(DISTINCT DRVR_USER_ID) AS TOT_DRVR_CNT,
    COUNT(DISTINCT DLVR_TASK_ID) AS TOT_DLVR_RQ_CREATE_CNT,
    COUNT(DISTINCT CASE WHEN DLVR_CARRIER_TS IS NOT NULL THEN DLVR_TASK_ID END) AS TOT_DLVR_RQ_SUCC_CNT,
    COUNT(DISTINCT CASE WHEN (ORDER_CNCL_ACTL_TS is null and      CUST_CNCL_RQ_TS is null and     SYS_CNCL_RQ_TS is null and     DRVR_CNCL_RQ_TS is null) and
	RTN_TS IS NOT NULL THEN DLVR_TASK_ID END) AS TOT_DLVR_RTN_CNT,
    APPROX_TOP_COUNT(DLVR_PKG_SIZE_CD, 1)[OFFSET(0)].VALUE AS TOT_ORDER_MEDIAN_SIZE_VAL,
    COUNT(DISTINCT CASE WHEN ORDER_ON_TM_DLVR_IND = 1 THEN SALES_ORDER_NBR END) AS TOT_ORDER_DLVR_ON_TM_CNT,

    COUNT(DISTINCT CASE WHEN DAAS_ON_TM_DLVR_IND = 1 THEN DLVR_TASK_ID END) as TOT_DAAS_DLVR_ON_TM_CNT ,
    COUNT(DISTINCT CASE WHEN DLVR_CARRIER_TS IS NOT NULL AND DAAS_ON_TM_DLVR_IND = 0 THEN DLVR_TASK_ID END) as TOT_DAAS_DLVR_LATE_CNT,
    SUM(CASE WHEN DLVR_CARRIER_TS IS NOT NULL AND DAAS_ON_TM_DLVR_IND = 0 THEN Delayed_in_mins END) as TOT_DELAY_IN_MIN,

    SUM(CASE WHEN DLVR_CARRIER_TS IS NOT NULL THEN TIP_AMT END) AS TOT_ORDER_TIP_AMT,
    COUNT(DISTINCT CASE WHEN DLVR_CARRIER_TS IS NOT NULL AND TIP_AMT >0 THEN DLVR_TASK_ID END) AS TOT_TIP_ELIG_IND,
    COUNT(DISTINCT CASE WHEN DLVR_CARRIER_TS <= coalesce(LATE_DLVR_TS ,SLOT_END_TS) AND DLVR_PRIORITY_NM ='SCHEDULED_DELIVERY' THEN SALES_ORDER_NBR END) AS TOT_ORDER_DLVR_ON_TM_SCHD_CNT,
    COUNT(DISTINCT CASE WHEN DLVR_CARRIER_TS <= coalesce(LATE_DLVR_TS ,SLOT_END_TS) AND DLVR_PRIORITY_NM ='SAME_DAY_DELIVERY' THEN SALES_ORDER_NBR END) AS TOT_ORDER_DLVR_ON_TM_SDAY_CNT,
    COUNT(DISTINCT CASE WHEN DLVR_CARRIER_TS IS NOT NULL AND DLVR_PRIORITY_NM ='SCHEDULED_DELIVERY' THEN DLVR_TASK_ID END) AS TOT_DLVR_SCHD_CNT,
    COUNT(DISTINCT CASE WHEN DLVR_CARRIER_TS IS NOT NULL AND DLVR_PRIORITY_NM ='SAME_DAY_DELIVERY' THEN DLVR_TASK_ID END) AS TOT_DLVR_SDAY_CNT,
	COUNT(DISTINCT CASE WHEN COALESCE(DLVR_CARRIER_TS, RTN_TS) IS NOT NULL THEN TRIP_ID END) AS TOT_DWELL_TRIP_CNT,
	COUNT(DISTINCT CASE WHEN CUST_CNCL_RQ_TS IS NOT NULL AND ENRTE_TO_PCKUP_TS IS NULL AND AT_PCKUP_TS IS NULL THEN DLVR_TASK_ID END) AS BEFORE_ETPU_CLNT_CNCL_CNT,
	COUNT(DISTINCT CASE WHEN CUST_CNCL_RQ_TS IS NOT NULL AND ENRTE_TO_PCKUP_TS IS NOT NULL AND AT_PCKUP_TS IS NULL THEN DLVR_TASK_ID END) AS AFTER_ETPU_CLNT_CNCL_CNT,
	COUNT(DISTINCT CASE WHEN CUST_CNCL_RQ_TS IS NOT NULL AND ENRTE_TO_PCKUP_TS IS NOT NULL AND AT_PCKUP_TS IS NOT NULL THEN DLVR_TASK_ID END) AS AFTER_ATPU_CLNT_CNCL_CNT,
	COUNT(DISTINCT CASE WHEN SYS_CNCL_RQ_TS IS NOT NULL AND ENRTE_TO_PCKUP_TS IS NULL AND AT_PCKUP_TS IS NULL THEN DLVR_TASK_ID END) AS BEFORE_ETPU_WMT_CNCL_CNT,
	COUNT(DISTINCT CASE WHEN SYS_CNCL_RQ_TS IS NOT NULL AND ENRTE_TO_PCKUP_TS IS NOT NULL AND AT_PCKUP_TS IS NULL THEN DLVR_TASK_ID END) AS AFTER_ETPU_WMT_CNCL_CNT,
	COUNT(DISTINCT CASE WHEN SYS_CNCL_RQ_TS IS NOT NULL AND ENRTE_TO_PCKUP_TS IS NOT NULL AND AT_PCKUP_TS IS NOT NULL THEN DLVR_TASK_ID END) AS AFTER_ATPU_WMT_CNCL_CNT,
    COUNT(distinct CASE WHEN CNCL_RQ_SRC_NM <> "CLIENT" or CNCL_TS > DRVR_REASSGN_TS or CNCL_TS > SLOT_START_TS THEN DLVR_TASK_ID END) AS ADJ_CLNT_CNCL_CNT,
    COUNT(DISTINCT CASE WHEN CNCL_RSN_DNS_IND = 1 THEN DLVR_TASK_ID END ) CNCL_RSN_DNS_CNT,
    COUNT(DISTINCT CASE WHEN CNCL_RSN_DNS_AFTER_DA_IND = 1 THEN DLVR_TASK_ID END ) CNCL_DNS_AFTER_DA_CNT,
    COUNT(DISTINCT CASE WHEN CNCL_RSN_DNF_AFTER_SLOTSTART_IND =1 THEN DLVR_TASK_ID END ) CNCL_DNF_AFTER_SLOTSTART_CNT,
    SUM(CASE WHEN CNCL_RSN_DNS_AFTER_DA_IND=1 THEN CNCL_RSN_DNS_TM END ) CNCL_DNS_TM_MINS,
    SUM(CASE WHEN CNCL_RSN_DNF_AFTER_SLOTSTART_IND=1 THEN CNCL_RSN_DNF_TM END ) CNCL_DNF_TM_MINS,
    -- count(distinct CASE WHEN date_diff(FIRST_ACCEPTED_TS,DLVR_OFFR_CRE_TS,minute) <=3 then DLVR_TASK_ID end) as OFFER_FACCEPT_3MIN_CNT,
    count(distinct CASE WHEN date_diff(FIRST_ACCEPTED_TS,SRC_ORDER_RCV_TS,minute) <=4 then DLVR_TASK_ID end) as ORDER_RCV_FACCEPT_4MIN_CNT,
    -- count(distinct CASE WHEN date_diff(FINAL_ACCEPTED_TS,DLVR_OFFR_CRE_TS,minute) <=3 then DLVR_TASK_ID end) as OFFER_LACCEPT_3MIN_CNT,
    -- count(distinct CASE WHEN date_diff(FINAL_ACCEPTED_TS,SRC_ORDER_RCV_TS,minute) <=3 then DLVR_TASK_ID end) as ORDER_RCV_LACCEPT_3MIN_CNT,
    count(distinct DLVR_TASK_ID ) as dlvr_task_id_CNT,
    sum(date_diff(FIRST_ACCEPTED_TS,SRC_ORDER_RCV_TS,minute)) as First_order_acceptance_tm,
    sum(case when TRIP_DLVR_SEQ_NBR=1 then DATETIME_DIFF(FINAL_ACCEPTED_TS,SRC_ORDER_RCV_TS,SECOND) end) as Last_order_acceptance_tm,
    sum(date_diff(FIRST_ACCEPTED_TS,DLVR_OFFR_CRE_TS,minute)) as First_offer_acceptance_tm,
    sum(case when TRIP_DLVR_SEQ_NBR=1 then DATETIME_DIFF(FINAL_ACCEPTED_TS,DLVR_OFFR_CRE_TS,SECOND) end) as Last_offer_acceptance_tm,
    sum(case when TRIP_DLVR_SEQ_NBR=1 then DATETIME_DIFF(DLVR_OFFR_CRE_TS, SRC_ORDER_RCV_TS, SECOND) end) as Tot_trip_offr_cre_tm,
    COUNT(DISTINCT CASE WHEN date_diff(AT_PCKUP_TS,SRC_ORDER_RCV_TS,minute) <=15 then DLVR_TASK_ID END) as DRVR_ARRIVE_15MIN_CNT,
    COUNT(DISTINCT CASE WHEN UPPER(DLVR_STS) in ('FC DELIVERED NONCHARGEABLE','FC DELIVERED CHARGEABLE') then DLVR_TASK_ID END) as FORCE_COMPLETE_DELIVERED,
    COUNT(DISTINCT CASE WHEN UPPER(DLVR_STS) = 'FC CANCELLED' then DLVR_TASK_ID END) as FORCE_COMPLETE_CANCELLED,
    COUNT(DISTINCT CASE WHEN UPPER(DLVR_STS) in ('FC RETURNED NONCHARGEABLE','FC RETURNED CHARGEABLE') then DLVR_TASK_ID END) as FORCE_COMPLETE_RETURNED,

    COUNT(DISTINCT CASE WHEN UPPER(DLVR_STS) = 'FC DELIVERED CHARGEABLE' then DLVR_TASK_ID END) as FORCE_COMPLETE_DELIVERED_CHARGEABLE,
    COUNT(DISTINCT CASE WHEN UPPER(DLVR_STS) = 'FC RETURNED CHARGEABLE' then DLVR_TASK_ID END) as FORCE_COMPLETE_RETURNED_CHARGEABLE,
    COUNT(DISTINCT CASE WHEN UPPER(DLVR_STS) in ('INCOMPLETE DELIVERED','INCOMPLETE RETURNED') then DLVR_TASK_ID END) as INCOMPLETE_DELIVERIES,

    COUNT(DISTINCT CASE WHEN ORDER_HAS_ALCOHOL_ITEM_IND=1 and dlvr_carrier_ts is not null then DLVR_TASK_ID END) as ALCOHOL_DELIVERIES,
    COUNT(DISTINCT DRVR_DROPPED_REF_ID) AS DRIVER_DROPPED_CNT,
    COUNT(DISTINCT CASE WHEN DRVR_DROPPED_REF_ID IS NOT NULL AND (ORDER_CNCL_ACTL_TS IS NOT NULL or SYS_CNCL_RQ_TS IS NOT NULL) THEN DRVR_DROPPED_REF_ID END) AS DRIVER_DROPPED_CNCL_CNT,
    --3/27 include below snippet after missing trips in DLMD are fixed
    --COUNT(DISTINCT CASE WHEN CARRIER_STS_CD = 'DRIVER_DROPPED' THEN DLVR_REF_ID||DD_TRIP_ID END) AS DRIVER_DROPPED_TRIP_CNT,
    --COUNT(DISTINCT CASE WHEN CARRIER_STS_CD = 'DRIVER_DROPPED' AND (ORDER_CNCL_ACTL_TS IS NOT NULL or SYS_CNCL_RQ_TS IS NOT NULL) THEN DLVR_REF_ID||DD_TRIP_ID END) AS DRIVER_DROPPED_CNCL_TRIP_CNT
    sum(date_diff(ENRTE_TO_PCKUP_TS,DRVR_REASSGN_TS,minute)) as TRIP_START_TM,

COALESCE(SUM(FINAL_PRICE_AMT),SUM(CASE WHEN CLNT_TRIP_STATUS_NM not in ('WALMART_CANCELLED','CANCELLED') THEN COALESCE(CLNT_BASE_DLVR_CHRG_AMT,0) + COALESCE(CLNT_DISTN_OVER_CHRG_AMT,0) +
 COALESCE(CLNT_WAIT_TM_OVER_CHRG_AMT ,0) ELSE 0 END + ( COALESCE(CLNT_BATCH_DISC_AMT,0) + COALESCE(CLNT_VOL_DISC_AMT,0) + COALESCE(CLNT_DMG_ORDER_DISC_AMT,0) +
  COALESCE(CLNT_RTN_CHRG_AMT,0) + COALESCE(CLNT_CNCL_CHRG_AMT,0) + COALESCE( CLNT_ST_SURFEE_CHRG_AMT,0) +  COALESCE(CLNT_REIMBMENT_AMT,0))),0)  as PRE_AUDIT_REVENUE_AMT,
COALESCE(SUM(CASE WHEN CLNT_TRIP_STATUS_NM not in ('WALMART_CANCELLED','CANCELLED') THEN COALESCE(CLNT_BASE_DLVR_CHRG_AMT,0) END),0) as BASE_DLVR_CHRG_AMT,
COALESCE(SUM(CASE WHEN CLNT_TRIP_STATUS_NM not in ('WALMART_CANCELLED','CANCELLED') THEN COALESCE(CLNT_WAIT_TM_OVER_CHRG_AMT,0) END),0) as WAIT_TM_OVER_CHRG_AMT,
COALESCE(SUM(CASE WHEN CLNT_TRIP_STATUS_NM not in ('WALMART_CANCELLED','CANCELLED') THEN COALESCE(CLNT_DISTN_OVER_CHRG_AMT,0) END ),0) as  DISTN_OVER_CHRG_AMT,
COALESCE(SUM(CLNT_CNCL_CHRG_AMT),0) as CNCL_CHRG_AMT,
COALESCE(SUM(CLNT_ST_SURFEE_CHRG_AMT),0) as ST_SURFEE_CHRG_AMT,
COALESCE(SUM(CLNT_RTN_CHRG_AMT),0) as RTN_CHRG_AMT,
COALESCE(SUM(CLNT_TIP_DISC_AMT),0) as TIP_DISC_AMT,
COALESCE(SUM(CLNT_BATCH_DISC_AMT),0) as BATCH_DISC_AMT,
COALESCE(SUM(CLNT_VOL_DISC_AMT),0) as VOL_DISC_AMT,
COALESCE(SUM(CLNT_REIMBMENT_AMT),0) as REIMBMENT_AMT,
--coalesce(sum(SPARK_ORDER_PAYMENT+SPARK_BONUS_PAYMENT),0) as PYMT_TRANS_AMT,
coalesce(CASE WHEN DLVR_CARRIER_NM = 'SPARK' THEN sum(SPARK_ORDER_PAYMENT+SPARK_BONUS_PAYMENT)
              WHEN DLVR_CARRIER_NM <> 'SPARK' THEN sum(NON_SPARK_PAYMENT)
              END,0) as PYMT_TRANS_AMT,
coalesce(sum(SPARK_ORDER_PAYMENT),0) as ORDER_PAYMENT,
coalesce(SUM(SPARK_BONUS_PAYMENT),0) as BONUS_PAYMENT,
coalesce(SUM(SPARK_INCENTIVE_AMT),0) as INCENTIVE_AMT,
coalesce(SUM(SPARK_BLANK_BONUS_AMT),0) as BLANK_BONUS_AMT,
coalesce(sum(c.trip_line_ext_clnt_variable_cost), 0) as EXT_CLNT_VARIABLE_COST_AMT,
0 as DRVR_ADMIN_FEE
FROM `wmt-edw-sandbox.LM_IAD_DAAS.DPS_DLVR_LAST_MI_DTL` A
left join trip_variable_cost c
  on a.trip_id = c.tmp_trip_id
  and A.DLVR_CARRIER_NM = c.tmp_dlvr_carrier_nm
GROUP BY 1,2,3,4,5
);
